
import React, { useEffect, useState } from "react";
import { useSelector } from "react-redux";
import Step1 from "./Step1";
import Step2 from "./Step2";
import axios from "axios";
import book from "./book1.jpg";
import { useNavigate } from "react-router-dom";

const MultiStepForm = () => {
  const [step, setStep] = useState(1);
  const [isUserRegistered, setIsUserRegistered] = useState(false);

  const [location, setLocation] = useState("");
  const [symptoms, setSymptoms] = useState("");
  const [date, setDate] = useState("");
  const [time, setTime] = useState("");
  const [specialty, setSpecialty] = useState("");
  const [specialties, setSpecialties] = useState([]);
  const [selectedDoctor, setSelectedDoctor] = useState(null);
  const [consultationType, setConsultationType] = useState("Physical");
  const [mobile, setMobile] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [doctors, setDoctors] = useState([]);
  const [showConfirmationModal, setShowConfirmationModal] = useState(false);
  const [userDetails, setUserDetails] = useState({ name: "", phone: "" });
  const [status, setStatus] = useState("Upcoming");

  const navigate = useNavigate();
  const user = useSelector((state) => state.auth.user); // âœ… Redux user

  useEffect(() => {
    const fetchDoctors = async () => {
      try {
        const response = await axios.get("https://mocki.io/v1/df98b258-0b01-4da8-9f14-a34d6c8d3690");
        setDoctors(response.data);
      } catch (error) {
        console.error("Failed to fetch doctors:", error);
      }
    };
    fetchDoctors();
  }, []);

  const handleNext = () => setStep((prev) => prev + 1);
  const handleBack = () => setStep((prev) => prev - 1);

  const handlePayment = async () => {
    const userId = localStorage.getItem("userId"); // Get user ID from localStorage
    const payload = {
      userId,
      name: `${user?.firstName || "Guest"} ${user?.lastName || ""}`, // Concatenate first and last name or use "Guest"
      phone: userDetails.phone, // User phone number from the form
      symptoms, // User symptoms entered
      date, // Selected appointment date
      time, // Selected appointment time
      specialty, // Specialty chosen by the user
      consultationType, // Whether it's a physical or virtual consultation
      doctorName: selectedDoctor?.name || "N/A", // Selected doctor's name, defaulting to "N/A" if not selected
      paymentMethod: "NotRequired", // Set the payment method; can be extended if needed
      status, // Appointment status, e.g., "Upcoming"
    };
  
    // Set loading state to true
    setIsLoading(true);
  
    try {
      // Send the POST request with payload
      const response = await axios.post(
        "https://67e3e1e42ae442db76d2035d.mockapi.io/register/book", // Endpoint for booking
        payload,
        {
          headers: {
            "Content-Type": "application/json", // Set content type to JSON
          },
        }
      );
  
      // On successful booking, log response and show confirmation modal
      console.log("Booking successful:", response.data);
      setShowConfirmationModal(true);
  
      // Reset the form and redirect after a short delay
      setTimeout(() => {
        setShowConfirmationModal(false);
        setStep(1);
        setLocation(""); // Clear location
        setSymptoms(""); // Clear symptoms
        setDate(""); // Clear date
        setTime(""); // Clear time
        setSpecialty(""); // Clear specialty
        setSpecialties([]); // Clear specialties list
        setSelectedDoctor(null); // Clear selected doctor
        setConsultationType("Physical"); // Reset consultation type to default
        setMobile(""); // Clear mobile number
        navigate("/dashboard/app"); // Redirect to dashboard
      }, 800);
    } catch (error) {
      // Handle error if booking fails
      console.error("Failed to book appointment:", error);
      alert("Booking failed. Please try again.");
    }
  };
  
  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-100">
      <div className="max-w-4xl w-full bg-white shadow-lg rounded-lg p-6 min-h-[450px] mt-4">
        <div className="flex flex-col md:flex-row">
          <div className="w-full md:w-1/2 px-4">
            <div className="min-h-[350px] h-auto overflow-y-auto">
              {step === 1 && (
                <Step1
                  consultationType={consultationType}
                  setConsultationType={setConsultationType}
                  location={location}
                  setLocation={setLocation}
                  symptoms={symptoms}
                  setSymptoms={setSymptoms}
                  specialty={specialty}
                  setSpecialty={setSpecialty}
                  specialties={specialties}
                  setSpecialties={setSpecialties}
                  date={date}
                  setDate={setDate}
                  time={time}
                  setTime={setTime}
                  doctors={doctors}
                  selectedDoctor={selectedDoctor}
                  setSelectedDoctor={setSelectedDoctor}
                  handleNext={handleNext}
                  mobile={mobile}
                  setMobile={setMobile}
                />
              )}
              {step === 2 && (
                <Step2
                  selectedDoctor={selectedDoctor}
                  selectedDate={date}
                  selectedTime={time}
                  handleBack={handleBack}
                  handlePayment={handlePayment}
                />
              )}
            </div>
          </div>

          <div className="hidden md:block w-px bg-gray-300 mx-2"></div>

          <div className="hidden md:block w-1/3 px-4 flex justify-center items-center min-h-[500px]">
            <img src={book} alt="Appointment" className="max-w-[400px] h-auto object-contain" />
          </div>
        </div>

        {showConfirmationModal && (
          <div className="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div className="bg-white rounded-xl shadow-2xl p-8 w-full max-w-lg animate-fadeIn">
              <div className="flex justify-center mb-4">
                <div className="bg-green-100 rounded-full p-3">
                  <svg
                    className="w-6 h-6 text-green-600"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    viewBox="0 0 24 24"
                  >
                    <path strokeLinecap="round" strokeLinejoin="round" d="M5 13l4 4L19 7" />
                  </svg>
                </div>
              </div>

              <h3 className="text-xl font-bold text-center text-[#0e1630] mb-2">
                Appointment Booked Successfully!
              </h3>
              <p className="text-center text-gray-700 mb-4">
                Youâ€™ll receive a confirmation message from the doctor shortly.
              </p>

              <div className="text-center text-sm font-medium text-[#0e1630] mb-4">
                ðŸ’³ Fee: <span className="text-yellow-600">â‚¹{selectedDoctor?.fees}</span>
              </div>

              <div className="bg-yellow-50 border border-yellow-300 text-yellow-800 text-sm rounded-lg p-4 text-center">
                Thank you! Redirecting you to your dashboardâ€¦
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default MultiStepForm;




import React, { useState } from "react";

// Step 1 Component for Booking Appointment
const Step1 = ({
  consultationType,
  setConsultationType,
  location,
  setLocation,
  symptoms,
  setSymptoms,
  specialty,
  setSpecialty,
  specialties,
  setSpecialties,
  date,
  setDate,
  time,
  setTime,
  doctors,
  selectedDoctor,
  setSelectedDoctor,
  handleNext,
}) => {
  const [currentIndex, setCurrentIndex] = useState(0);

  // Handle symptom input and map to specialties
  const handleSymptomsChange = (e) => {
    const val = e.target.value.toLowerCase();
    setSymptoms(val);
    setSpecialties(symptomSpecialtyMap[val] || []);
    setSpecialty("");
  };

  // Filter doctors based on consultation type, date, time, and location (for physical consultations)
  const filteredDoctors = doctors.filter((doctor) => {
    const isSameType =
      doctor.consultationType.toLowerCase() === consultationType.toLowerCase();

    if (consultationType === "Physical") {
      return (
        isSameType &&
        doctor.specialty === specialty &&
        doctor.location === location &&
        doctor.availableDates.includes(date) &&
        doctor.availableTimes.includes(time)
      );
    } else if (consultationType === "Virtual") {
      return (
        isSameType &&
        doctor.specialty === specialty &&
        doctor.availableDates.includes(date) &&
        doctor.availableTimes.includes(time)
      );
    }

    return false;
  });

  // Next doctor navigation
  const handleNextDoctor = () => {
    if (currentIndex < filteredDoctors.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }
  };

  // Previous doctor navigation
  const handlePrevDoctor = () => {
    if (currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    }
  };

  return (
    <div className="space-y-6 text-sm text-[#0e1630] min-h-[450px] rounded-xl">
      <h2 className="text-2xl font-bold text-[#0e1630] mb-4">
        Book <span className="text-yellow-400">Appointment</span>
      </h2>

      {/* Consultation Type Selection */}
      <div>
  <h4 className="font-semibold mb-2">Consultation Type</h4>
  <div className="flex gap-4">
    {["Physical", "Virtual"].map((type) => (
      <label
        key={type}
        className={`flex items-center gap-2 px-4 py-2 border rounded-xl cursor-pointer ${
          consultationType === type
            ? "border-slate-900 bg-slate-900 text-white"
            : "border-slate-200 hover:border-slate-300"
        }`}
      >
        <input
          type="radio"
          name="consultationType"
          value={type}
          checked={consultationType === type}
          onChange={(e) => setConsultationType(e.target.value)}
          className="accent-[#0e1630] absolute opacity-0"
        />
        <span>{type}</span>
      </label>
    ))}
  </div>
</div>


      {/* Location (for Physical Consultation) */}
      {consultationType === "Physical" && (
        <div>
          <label className="font-semibold mb-2">Location</label>
          <select
            value={location}
            onChange={(e) => setLocation(e.target.value)}
            className="w-full p-3 border border-[#ccd1dc] rounded-xl bg-white"
          >
            <option value="">Select location</option>
            {citiesData.map((c) => (
              <option key={c.id} value={c.name}>
                {c.name}
              </option>
            ))}
          </select>
        </div>
      )}

      {/* Symptom Description */}
      <div>
        <label className="font-semibold mb-2">Describe your symptoms</label>
        <input
          type="text"
          placeholder="e.g. Fever, Cough..."
          value={symptoms}
          onChange={handleSymptomsChange}
          className="w-full p-3 border border-[#ccd1dc] rounded-xl bg-white"
        />
      </div>

      {/* Suggested Specialties */}
      {specialties.length > 0 && (
        <div className="space-y-2">
          {specialties.map((spec, i) => (
            <label
              key={i}
              className={`flex justify-between items-center px-4 py-2 border rounded-xl cursor-pointer transition-all ${
                specialty === spec
                  ? "border-[#0e1630] bg-[#0e1630]/10"
                  : "border-[#ccd1dc] hover:border-[#0e1630]"
              }`}
            >
              <div className="flex items-center gap-2">
                <input
                  type="radio"
                  name="specialty"
                  value={spec}
                  checked={specialty === spec}
                  onChange={(e) => setSpecialty(e.target.value)}
                  className="accent-[#0e1630]"
                />
                <span>{spec}</span>
              </div>
            </label>
          ))}
        </div>
      )}

      {/* Date & Time Selection */}
      <div className="flex gap-4">
        <div className="w-1/2">
          <label className="font-semibold mb-2">Select Date</label>
          <input
            type="date"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            className="w-full p-3 border rounded-xl"
          />
        </div>
        <div className="w-1/2">
          <label className="font-semibold mb-2">Select Time</label>
          <input
            type="time"
            value={time}
            onChange={(e) => setTime(e.target.value)}
            className="w-full p-3 border rounded-xl"
          />
        </div>
      </div>

      {/* Display Available Doctors */}
      {filteredDoctors.length > 0 && (
        <div className="relative w-full mt-4">
          <h4 className="text-base font-semibold mb-3">Available Doctors</h4>
          <div className="overflow-hidden">
            <div
              className="flex gap-4 transition-transform duration-300 ease-in-out"
              style={{ transform: `translateX(-${currentIndex * 230}px)` }}
            >
              {filteredDoctors.map((doctor) => (
                <div
                  key={doctor.name}
                  className={`min-w-[200px] max-w-[200px] p-3 border rounded-2xl shadow-md cursor-pointer transition-all duration-200 ${
                    selectedDoctor?.name === doctor.name
                      ? "border-[#0e1630] bg-[#0e1630]/10 ring-1 ring-[#0e1630]"
                      : "border-[#ccd1dc] hover:border-[#0e1630]"
                  }`}
                  onClick={() => setSelectedDoctor(doctor)}
                >
                  <div className="flex items-center gap-3">
                    <img
                      src={doctor.photo}
                      alt={doctor.name}
                      className="w-12 h-12 rounded-full object-cover border-2 border-[#0e1630]"
                      onError={(e) => {
                        e.target.onerror = null;
                        e.target.src =
                          "https://cdn-icons-png.flaticon.com/512/3870/3870822.png";
                      }}
                    />
                    <div>
                      <h6 className="text-sm font-semibold">{doctor.name}</h6>
                      <p className="text-xs text-gray-500">{doctor.specialty}</p>
                      <span className="text-sm font-medium text-yellow-500">
                        â‚¹{doctor.fees}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Navigation Buttons */}
          <div className="absolute top-1/2 left-2 transform -translate-y-1/2 z-20">
            <button
              onClick={handlePrevDoctor}
              className="backdrop-blur-md bg-white/70 hover:bg-white text-[#0e1630] p-1 rounded-full shadow-lg border border-[#e2e8f0] hover:scale-105 transition-all duration-200"
              title="Previous"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M15 19l-7-7 7-7"
                />
              </svg>
            </button>
          </div>

          <div className="absolute top-1/2 right-2 transform -translate-y-1/2 z-20">
            <button
              onClick={handleNextDoctor}
              className="backdrop-blur-md bg-white/70 hover:bg-white text-[#0e1630] p-1 rounded-full shadow-lg border border-[#e2e8f0] hover:scale-105 transition-all duration-200"
              title="Next"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M9 5l7 7-7 7"
                />
              </svg>
            </button>
          </div>
        </div>
      )}

      {/* Next Button */}
      <div className="flex justify-end mt-6">
  <button
    type="button"
    onClick={handleNext}
    className="bg-slate-900 text-white px-8 py-3 rounded-xl font-medium shadow-lg 
          hover:bg-slate-800 "
  >
   Next
  </button>
</div>

    </div>
  );
};

export default Step1;

// Static Data for Cities and Symptom-Specialty Mapping
const citiesData = [
  { id: "delhi", name: "Delhi" },
  { id: "mumbai", name: "Mumbai" },
  { id: "bangalore", name: "Bangalore" },
  { id: "chennai", name: "Chennai" },
  { id: "kolkata", name: "Kolkata" },
  { id: "hyderabad", name: "Hyderabad" },
  { id: "pune", name: "Pune" },
];

const symptomSpecialtyMap = {
  fever: ["Pediatrics", "General Physician"],
  cough: ["Pulmonologist", "General Physician"],
  headache: ["Neurologist", "General Physician"],
  pain: ["Orthopedic", "General Physician"],
  stomach: ["Gastroenterologist", "General Physician"],
  rash: ["Dermatologist", "General Physician"],
  "chest pain": ["Cardiologist", "General Physician"],
};


import React from "react";

const Step2 = ({
  selectedDoctor,
  selectedDate,
  selectedTime,
  handleBack,
  handlePayment, // now expecting this prop
}) => {
  return (
    <div className="space-y-6">
      {/* Section Title */}
      <h2 className="text-xl font-semibold text-gray-800 mb-4">Confirm & Pay</h2>

      {/* Doctor Summary Card */}
      <div>
        <h3 className="text-base font-semibold text-[#0e1630] mb-2">
          Please review your selected doctor and appointment slot.
        </h3>

        {selectedDoctor ? (
          <div className="bg-white p-5 rounded-lg shadow-md border border-[#0e1630] text-sm flex gap-5 items-start">
            <div className="flex-shrink-0">
              <img
                src={selectedDoctor.photoUrl || "https://via.placeholder.com/100"}
                alt={selectedDoctor.name}
                className="w-20 h-20 rounded-full object-cover border border-yellow-500"
              />
            </div>
            <div className="space-y-1">
              <h4 className="text-lg font-bold text-[#0e1630]">{selectedDoctor.name}</h4>
              <p className="text-xs text-gray-600">{selectedDoctor.qualification}</p>
              <p className="text-xs text-gray-600">
                <span className="font-medium text-[#0e1630]">Experience:</span> {selectedDoctor.experience} years
              </p>
              <p className="text-xs text-gray-600">
                <span className="font-medium text-[#0e1630]">Specialty:</span> {selectedDoctor.specialty}
              </p>
              <p className="text-xs text-gray-600">
                <span className="font-medium text-[#0e1630]">Location:</span> {selectedDoctor.location}
              </p>
              <p className="text-xs text-gray-600">
                <span className="font-medium text-[#0e1630]">Consultation Type:</span> {selectedDoctor.consultationType}
              </p>
              <p className="text-sm font-semibold text-yellow-600 mt-2">
                Consultation Fee: â‚¹{selectedDoctor.fees}
              </p>
            </div>
          </div>
        ) : (
          <p className="text-red-500 text-sm">No doctor selected</p>
        )}
      </div>

      {/* Appointment Date & Time */}
      <p className="text-md font-semibold text-gray-800 mb-4">Review Your Appointment Details</p>
      <div className="bg-white p-4 rounded-lg shadow-sm border border-blue-200 text-sm">
        <h3 className="font-medium text-[#0e1630] mb-2">Appointment Slot</h3>
        <p className="text-gray-600">
          <span className="font-medium text-gray-800">Date:</span> {selectedDate || "Not selected"}
        </p>
        <p className="text-gray-600">
          <span className="font-medium text-gray-800">Time:</span> {selectedTime || "Not selected"}
        </p>
        <p className="text-gray-600">
          <span className="font-medium text-gray-800">Consultation Type:</span> {selectedDoctor?.consultationType || "Not selected"}
        </p>
      </div>

      {/* Navigation Buttons */}
      <div className="flex justify-end mt-6">
        <button
          onClick={handleBack}
          className="px-4 py-2 bg-gray-200 hover:bg-gray-300 text-gray-800 rounded-md me-4"
        >
          Back
        </button>
        <button
          onClick={handlePayment}
          className="px-4 py-2 bg-[#0e1630] hover:bg-[#0b1b2b] text-white rounded-md transition-colors duration-300 ease-in-out"
        >
          Submit
        </button>
      </div>
    </div>
  );
};

export default Step2;





