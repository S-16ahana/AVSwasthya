import React, { useState, useEffect } from 'react';
import axios from 'axios';

const DoctorAppointments = () => {
  const [appointments, setAppointments] = useState([]);
  const [tab, setTab] = useState('pending');
  const [selectedRejectReason, setSelectedRejectReason] = useState({});
  const [rejectModalId, setRejectModalId] = useState(null);

  const doctorInfo = {
    name: 'Dr. Rajiv mayuri',
    specialty: 'Cardiology',
    fee: 699,
  };

  const rejectionOptions = [
    "Doctor unavailable at selected time",
    "Invalid symptoms description",
    "Outside of doctor's expertise",
    "Please choose another consultation type",
    "Other",
  ];

  const fetchAppointments = async () => {
    try {
      const res = await axios.get(
        'https://67e3e1e42ae442db76d2035d.mockapi.io/register/book'
      );
      const filtered = res.data.filter((item) => item.doctorName === doctorInfo.name);
      const formatted = filtered.map((item) => ({
        id: item.id,
        name: item.name || 'Unknown',
        phone: item.phone || 'Not Provided',
        date: item.date,
        time: item.time,
        reason: item.symptoms,
        specialty: item.specialty,
        type: item.consultationType,
        status: 'Pending',
        prescription: '',
        link: '',
        rejectReason: '',
      }));
      setAppointments(formatted);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    fetchAppointments();
  }, []);

  const notifyPatient = async (name, phone, message, showPayButton = false) => {
    try {
      await axios.post('https://67e631656530dbd3110f0322.mockapi.io/notify', {
        name,
        phone,
        message,
        showPayButton,
        createdAt: new Date().toISOString(),
      });
    } catch (error) {
      console.error('Failed to send notification:', error);
    }
  };

  const handleAccept = (id) => {
    const updated = appointments.map((appt) =>
      appt.id === id ? { ...appt, status: 'Confirmed' } : appt
    );
    setAppointments(updated);

    const accepted = appointments.find((appt) => appt.id === id);

    notifyPatient(
      accepted.name,
      accepted.phone,
      `✅ Your appointment with ${doctorInfo.name} (${doctorInfo.specialty}) on ${accepted.date} at ${accepted.time} has been confirmed.\nConsultation Fees: ₹${doctorInfo.fee}`,
      true
    );
  };

  const handleReject = (id) => {
    const reason = selectedRejectReason[id] || "No reason provided";
    const updated = appointments.map((appt) =>
      appt.id === id ? { ...appt, status: 'Rejected', rejectReason: reason } : appt
    );
    setAppointments(updated);

    const rejected = appointments.find((appt) => appt.id === id);

    notifyPatient(
      rejected.name,
      rejected.phone,
      `❌ Your appointment request has been rejected.\nReason: ${reason}`
    );
    setRejectModalId(null);
  };

  const handleUploadPrescription = (id) => {
    const prescription = prompt('Enter prescription text or link:');
    if (prescription) {
      const updated = appointments.map((appt) =>
        appt.id === id ? { ...appt, prescription } : appt
      );
      setAppointments(updated);
    }
  };

  const handleSendLink = (id) => {
    const link = prompt('Enter consultation meeting link:');
    if (link) {
      const updated = appointments.map((appt) =>
        appt.id === id ? { ...appt, link } : appt
      );
      setAppointments(updated);
    }
  };

  const filteredAppointments = appointments.filter(
    (appt) =>
      (tab === 'pending' && appt.status === 'Pending') ||
      (tab === 'confirmed' && appt.status === 'Confirmed') ||
      (tab === 'rejected' && appt.status === 'Rejected')
  );

  return (
    <div className="p-6 bg-gray-50 rounded-xl shadow-lg">
      <h1 className="text-2xl font-semibold text-gray-800 mb-6">
        Appointments for {doctorInfo.name}
      </h1>

      <div className="flex space-x-4 mb-6">
        {['pending', 'confirmed', 'rejected'].map((t) => (
          <button
            key={t}
            onClick={() => setTab(t)}
            className={`px-5 py-3 rounded-lg ${
              tab === t ? 'bg-blue-700' : 'bg-blue-600'
            } text-white hover:bg-blue-800 capitalize`}
          >
            {t}
          </button>
        ))}
      </div>

      <div className="overflow-x-auto bg-white shadow-md rounded-lg">
        <table className="w-full text-sm text-gray-500">
          <thead className="bg-gray-100 text-gray-700">
            <tr>
              <th className="border-b px-4 py-3 text-left">Name</th>
              <th className="border-b px-4 py-3 text-left">Phone</th>
              <th className="border-b px-4 py-3 text-left">Date</th>
              <th className="border-b px-4 py-3 text-left">Time</th>
              <th className="border-b px-4 py-3 text-left">Symptoms</th>
              <th className="border-b px-4 py-3 text-left">Type</th>
              <th className="border-b px-4 py-3 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredAppointments.map((appt) => (
              <tr key={appt.id} className="hover:bg-gray-50">
                <td className="border-b px-4 py-2">{appt.name}</td>
                <td className="border-b px-4 py-2">{appt.phone}</td>
                <td className="border-b px-4 py-2">{appt.date}</td>
                <td className="border-b px-4 py-2">{appt.time}</td>
                <td className="border-b px-4 py-2">{appt.reason}</td>
                <td className="border-b px-4 py-2">{appt.type}</td>
                <td className="border-b px-4 py-2 space-x-2">
                  {tab === 'pending' && (
                    <>
                      <button
                        onClick={() => handleAccept(appt.id)}
                        className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                      >
                        Accept
                      </button>
                      <button
                        onClick={() => setRejectModalId(appt.id)}
                        className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600"
                      >
                        Reject
                      </button>
                    </>
                  )}
                  {tab === 'confirmed' && (
                    <>
                      <button
                        onClick={() => handleSendLink(appt.id)}
                        className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
                      >
                        Send Link
                      </button>
                      <button
                        onClick={() => handleUploadPrescription(appt.id)}
                        className="bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600"
                      >
                        Upload Prescription
                      </button>
                    </>
                  )}
                  {tab === 'rejected' && (
                    <p className="text-red-600 text-sm">{appt.rejectReason}</p>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {rejectModalId && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
          <div className="bg-white rounded-lg p-6 w-96 shadow-lg">
            <h2 className="text-xl font-semibold mb-4">Reject Appointment</h2>
            <select
              className="w-full p-3 border rounded-lg mb-4"
              value={selectedRejectReason[rejectModalId] || ''}
              onChange={(e) =>
                setSelectedRejectReason({
                  ...selectedRejectReason,
                  [rejectModalId]: e.target.value,
                })
              }
            >
              <option value="">Select Rejection Reason</option>
              {rejectionOptions.map((opt, idx) => (
                <option key={idx} value={opt}>
                  {opt}
                </option>
              ))}
            </select>

            <div className="mt-4 flex justify-between">
              <button
                onClick={() => handleReject(rejectModalId)}
                disabled={!selectedRejectReason[rejectModalId]}
                className="bg-red-600 text-white px-4 py-2 rounded-md disabled:opacity-50"
              >
                Confirm
              </button>
              <button
                onClick={() => setRejectModalId(null)}
                className="bg-gray-300 text-gray-800 px-4 py-2 rounded-md"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DoctorAppointments;