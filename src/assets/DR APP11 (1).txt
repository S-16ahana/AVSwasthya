import React, { useEffect, useState } from 'react';
import axios from 'axios';

const PatientNotifications = () => {
  const [notifications, setNotifications] = useState([]);

  const fetchNotifications = async () => {
    try {
      const res = await axios.get('https://67e631656530dbd3110f0322.mockapi.io/notify');
      const sorted = res.data.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));
      setNotifications(sorted);
    } catch (error) {
      console.error('Failed to fetch notifications:', error);
    }
  };

  useEffect(() => {
    fetchNotifications();
    const interval = setInterval(fetchNotifications, 10000);
    return () => clearInterval(interval);
  }, []);

  const getTimeAgo = (createdAt) => {
    const now = new Date();
    const time = new Date(createdAt);
    const diff = Math.floor((now - time) / 1000);
    if (diff < 60) return 'Just now';
    if (diff < 3600) return `${Math.floor(diff / 60)} min ago`;
    return `${Math.floor(diff / 3600)} hr ago`;
  };

  return (
    <div className="bg-white text-blue-800 p-6 rounded-2xl shadow-lg max-w-3xl mx-auto">
      <h2 className="text-xl font-semibold mb-4">Notifications</h2>
      {notifications.length === 0 ? (
        <p>No notifications yet.</p>
      ) : (
        <ul className="space-y-4">
          {notifications.map((note) => (
            <li key={note.id} className="bg-blue-100 p-4 rounded-lg shadow">
              <p className="whitespace-pre-line">{note.message}</p>
              <p className="text-xs text-gray-600 mt-2">{getTimeAgo(note.createdAt)}</p>
              {note.showPayButton && (
                <button className="mt-3 bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600">
                  Pay Now
                </button>
              )}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default PatientNotifications;
import React, { useState } from 'react';
import { useLocation } from 'react-router-dom';

const InputField = ({ label, type = 'text', placeholder, value, onChange, error, inputClassName }) => (
  <div>
    <label className="block text-sm mb-2 font-medium text-gray-700">{label}</label>
    <input
      type={type}
      placeholder={placeholder}
      value={value}
      onChange={onChange}
      className={`w-full p-4 border border-gray-300 rounded-lg shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 ${inputClassName}`}
    />
    {error && <p className="text-red-500 text-sm mt-1">{error}</p>}
  </div>
);

const PaymentForm = () => {
  const location = useLocation();
  const { doctorName, consultationFee } = location.state || {};

  const [paymentAmount, setPaymentAmount] = useState(consultationFee || '');
  const [paymentStatus, setPaymentStatus] = useState('');
  const [paymentMethod, setPaymentMethod] = useState('');
  const [showSuccessModal, setShowSuccessModal] = useState(false);

  const [cardDetails, setCardDetails] = useState({ number: '', name: '', expiry: '', cvv: '' });
  const [gpayDetails, setGpayDetails] = useState({ email: '', mobile: '', transactionId: '' });
  const [netbankingDetails, setNetbankingDetails] = useState({ bankName: '' });
  const [bankSearch, setBankSearch] = useState('');

  const handlePayment = () => {
    setTimeout(() => {
      setPaymentStatus(`Payment of ₹${paymentAmount} to Dr. ${doctorName} was successful!`);
      setShowSuccessModal(true);
      updatePaymentRecord();
    }, 2000);
  };

  const updatePaymentRecord = () => {
    const paymentData = {
      doctorName,
      amount: paymentAmount,
      method: paymentMethod,
      transactionId: 'TXN12345',
      patientDetails: {}, // optional
    };

    // Example API call (disabled in mock)
    // axios.post('/api/update-payment', paymentData)
    //   .then(res => console.log(res.data))
    //   .catch(err => console.error(err));
  };

  return (
    <div className="flex justify-center items-center min-h-screen bg-gradient-to-r from-blue-100 to-blue-300">
      <div className="bg-white text-blue-800 p-8 rounded-2xl shadow-lg max-w-md w-full h-[600px] overflow-auto">
        <h2 className="text-2xl font-semibold mb-4 text-center">Payment to Dr. {doctorName}</h2>

        <div className="mb-4 text-lg">
          <span>Consultation Fee: ₹{consultationFee}</span>
        </div>

        <div className="grid grid-cols-3 gap-4 mb-6">
          {['Card', 'GPay', 'NetBanking'].map((method) => (
            <label
              key={method}
              className={`border rounded-lg p-3 text-center cursor-pointer transition-all hover:border-blue-400 ${paymentMethod === method ? 'border-blue-800 bg-blue-50 font-semibold' : 'border-gray-300'}`}
            >
              <input
                type="radio"
                name="paymentMethod"
                value={method}
                checked={paymentMethod === method}
                onChange={(e) => setPaymentMethod(e.target.value)}
                className="hidden"
              />
              {method}
            </label>
          ))}
        </div>

        {paymentMethod === 'Card' && (
          <div className="space-y-4">
            <InputField label="Card Number" placeholder="Enter card number" value={cardDetails.number}
              onChange={(e) => setCardDetails({ ...cardDetails, number: e.target.value })} />
            <InputField label="Name on Card" placeholder="Enter name" value={cardDetails.name}
              onChange={(e) => setCardDetails({ ...cardDetails, name: e.target.value })} />
            <div className="grid grid-cols-2 gap-4">
              <InputField label="Expiry (MM/YY)" placeholder="MM/YY" value={cardDetails.expiry}
                onChange={(e) => setCardDetails({ ...cardDetails, expiry: e.target.value })} />
              <InputField label="CVV" placeholder="CVV" type="password" value={cardDetails.cvv}
                onChange={(e) => setCardDetails({ ...cardDetails, cvv: e.target.value })} />
            </div>
          </div>
        )}

        {paymentMethod === 'GPay' && (
          <div className="space-y-4">
            <InputField label="GPay Email" placeholder="example@gmail.com" value={gpayDetails.email}
              onChange={(e) => setGpayDetails({ ...gpayDetails, email: e.target.value })} />
            <InputField label="Mobile Number" type="tel" placeholder="10-digit number" value={gpayDetails.mobile}
              onChange={(e) => setGpayDetails({ ...gpayDetails, mobile: e.target.value })} />
            <InputField label="Transaction ID (optional)" placeholder="Txn12345..." value={gpayDetails.transactionId}
              onChange={(e) => setGpayDetails({ ...gpayDetails, transactionId: e.target.value })} />
          </div>
        )}

        {paymentMethod === 'NetBanking' && (
          <div className="space-y-3">
            <input type="text" placeholder="Search Bank" value={bankSearch}
              onChange={(e) => setBankSearch(e.target.value)}
              className="w-full p-4 border border-gray-300 rounded-md mb-4 focus:ring-blue-500" />
            <div className="max-h-40 overflow-y-auto space-y-2">
              {['HDFC', 'ICICI', 'SBI', 'Axis', 'Kotak', 'PNB', 'BOB', 'Yes Bank']
                .filter(bank => bank.toLowerCase().includes(bankSearch.toLowerCase()))
                .map(bank => (
                  <label key={bank} className="flex items-center space-x-2">
                    <input type="radio" name="selectedBank" value={bank}
                      checked={netbankingDetails.bankName === bank}
                      onChange={(e) => setNetbankingDetails({ ...netbankingDetails, bankName: e.target.value })} />
                    <span>{bank}</span>
                  </label>
                ))}
            </div>
          </div>
        )}

        <button
          onClick={handlePayment}
          className="w-full bg-[#1E3A8A] text-white px-4 py-3 rounded-md hover:bg-[#172c5f] transition duration-300 mt-6"
        >
          Make Payment
        </button>

        {paymentStatus && (
          <div className="mt-4 text-green-600 text-center">{paymentStatus}</div>
        )}

        {showSuccessModal && (
          <div className="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-xl shadow-xl text-center max-w-sm">
              <h3 className="text-xl font-semibold mb-2">🎉 Payment Successful</h3>
              <p>{paymentStatus}</p>
              <button
                onClick={() => setShowSuccessModal(false)}
                className="mt-4 px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700"
              >
                Close
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default PaymentForm;
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const DoctorAppointments = () => {
  const [appointments, setAppointments] = useState([]);
  const [tab, setTab] = useState('pending');
  const [selectedRejectReason, setSelectedRejectReason] = useState({});
  const [rejectModalId, setRejectModalId] = useState(null);

  const doctorInfo = {
    name: 'Dr. Rajiv mayuri',
    specialty: 'Cardiology',
    fee: 699,
  };

  const rejectionOptions = [
    "Doctor unavailable at selected time",
    "Invalid symptoms description",
    "Outside of doctor's expertise",
    "Please choose another consultation type",
    "Other",
  ];

  const fetchAppointments = async () => {
    try {
      const res = await axios.get(
        'https://67e3e1e42ae442db76d2035d.mockapi.io/register/book'
      );
      const filtered = res.data.filter((item) => item.doctorName === doctorInfo.name);
      const formatted = filtered.map((item) => ({
        id: item.id,
        name: item.name || 'Unknown',
        phone: item.phone || 'Not Provided',
        date: item.date,
        time: item.time,
        reason: item.symptoms,
        specialty: item.specialty,
        type: item.consultationType,
        status: 'Pending',
        prescription: '',
        link: '',
        rejectReason: '',
      }));
      setAppointments(formatted);
    } catch (err) {
      console.error(err);
    }
  };

  useEffect(() => {
    fetchAppointments();
  }, []);

  const notifyPatient = async (name, phone, message, showPayButton = false) => {
    try {
      await axios.post('https://67e631656530dbd3110f0322.mockapi.io/notify', {
        name,
        phone,
        message,
        showPayButton,
        createdAt: new Date().toISOString(),
      });
    } catch (error) {
      console.error('Failed to send notification:', error);
    }
  };

  const handleAccept = (id) => {
    const updated = appointments.map((appt) =>
      appt.id === id ? { ...appt, status: 'Confirmed' } : appt
    );
    setAppointments(updated);

    const accepted = appointments.find((appt) => appt.id === id);

    notifyPatient(
      accepted.name,
      accepted.phone,
      `✅ Your appointment with ${doctorInfo.name} (${doctorInfo.specialty}) on ${accepted.date} at ${accepted.time} has been confirmed.\nConsultation Fees: ₹${doctorInfo.fee}`,
      true
    );
  };

  const handleReject = (id) => {
    const reason = selectedRejectReason[id] || "No reason provided";
    const updated = appointments.map((appt) =>
      appt.id === id ? { ...appt, status: 'Rejected', rejectReason: reason } : appt
    );
    setAppointments(updated);

    const rejected = appointments.find((appt) => appt.id === id);

    notifyPatient(
      rejected.name,
      rejected.phone,
      `❌ Your appointment request has been rejected.\nReason: ${reason}`
    );
    setRejectModalId(null);
  };

  const handleUploadPrescription = (id) => {
    const prescription = prompt('Enter prescription text or link:');
    if (prescription) {
      const updated = appointments.map((appt) =>
        appt.id === id ? { ...appt, prescription } : appt
      );
      setAppointments(updated);
    }
  };

  const handleSendLink = (id) => {
    const link = prompt('Enter consultation meeting link:');
    if (link) {
      const updated = appointments.map((appt) =>
        appt.id === id ? { ...appt, link } : appt
      );
      setAppointments(updated);
    }
  };

  const filteredAppointments = appointments.filter(
    (appt) =>
      (tab === 'pending' && appt.status === 'Pending') ||
      (tab === 'confirmed' && appt.status === 'Confirmed') ||
      (tab === 'rejected' && appt.status === 'Rejected')
  );

  return (
    <div className="p-6 bg-gray-50 rounded-xl shadow-lg">
      <h1 className="text-2xl font-semibold text-gray-800 mb-6">
        Appointments for {doctorInfo.name}
      </h1>

      <div className="flex space-x-4 mb-6">
        {['pending', 'confirmed', 'rejected'].map((t) => (
          <button
            key={t}
            onClick={() => setTab(t)}
            className={`px-5 py-3 rounded-lg ${
              tab === t ? 'bg-blue-700' : 'bg-blue-600'
            } text-white hover:bg-blue-800 capitalize`}
          >
            {t}
          </button>
        ))}
      </div>

      <div className="overflow-x-auto bg-white shadow-md rounded-lg">
        <table className="w-full text-sm text-gray-500">
          <thead className="bg-gray-100 text-gray-700">
            <tr>
              <th className="border-b px-4 py-3 text-left">Name</th>
              <th className="border-b px-4 py-3 text-left">Phone</th>
              <th className="border-b px-4 py-3 text-left">Date</th>
              <th className="border-b px-4 py-3 text-left">Time</th>
              <th className="border-b px-4 py-3 text-left">Symptoms</th>
              <th className="border-b px-4 py-3 text-left">Type</th>
              <th className="border-b px-4 py-3 text-left">Actions</th>
            </tr>
          </thead>
          <tbody>
            {filteredAppointments.map((appt) => (
              <tr key={appt.id} className="hover:bg-gray-50">
                <td className="border-b px-4 py-2">{appt.name}</td>
                <td className="border-b px-4 py-2">{appt.phone}</td>
                <td className="border-b px-4 py-2">{appt.date}</td>
                <td className="border-b px-4 py-2">{appt.time}</td>
                <td className="border-b px-4 py-2">{appt.reason}</td>
                <td className="border-b px-4 py-2">{appt.type}</td>
                <td className="border-b px-4 py-2 space-x-2">
                  {tab === 'pending' && (
                    <>
                      <button
                        onClick={() => handleAccept(appt.id)}
                        className="bg-green-500 text-white px-4 py-2 rounded-md hover:bg-green-600"
                      >
                        Accept
                      </button>
                      <button
                        onClick={() => setRejectModalId(appt.id)}
                        className="bg-red-500 text-white px-4 py-2 rounded-md hover:bg-red-600"
                      >
                        Reject
                      </button>
                    </>
                  )}
                  {tab === 'confirmed' && (
                    <>
                      <button
                        onClick={() => handleSendLink(appt.id)}
                        className="bg-blue-500 text-white px-4 py-2 rounded-md hover:bg-blue-600"
                      >
                        Send Link
                      </button>
                      <button
                        onClick={() => handleUploadPrescription(appt.id)}
                        className="bg-purple-500 text-white px-4 py-2 rounded-md hover:bg-purple-600"
                      >
                        Upload Prescription
                      </button>
                    </>
                  )}
                  {tab === 'rejected' && (
                    <p className="text-red-600 text-sm">{appt.rejectReason}</p>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      {rejectModalId && (
        <div className="fixed inset-0 flex items-center justify-center z-50 bg-black bg-opacity-50">
          <div className="bg-white rounded-lg p-6 w-96 shadow-lg">
            <h2 className="text-xl font-semibold mb-4">Reject Appointment</h2>
            <select
              className="w-full p-3 border rounded-lg mb-4"
              value={selectedRejectReason[rejectModalId] || ''}
              onChange={(e) =>
                setSelectedRejectReason({
                  ...selectedRejectReason,
                  [rejectModalId]: e.target.value,
                })
              }
            >
              <option value="">Select Rejection Reason</option>
              {rejectionOptions.map((opt, idx) => (
                <option key={idx} value={opt}>
                  {opt}
                </option>
              ))}
            </select>

            <div className="mt-4 flex justify-between">
              <button
                onClick={() => handleReject(rejectModalId)}
                disabled={!selectedRejectReason[rejectModalId]}
                className="bg-red-600 text-white px-4 py-2 rounded-md disabled:opacity-50"
              >
                Confirm
              </button>
              <button
                onClick={() => setRejectModalId(null)}
                className="bg-gray-300 text-gray-800 px-4 py-2 rounded-md"
              >
                Cancel
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DoctorAppointments;